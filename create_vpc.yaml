---
- hosts: localhost
  gather_facts: no
  module_defaults:
    group/aws:
      region: "us-east-2"
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: Module5-ig-vpc
        cidr_block: 10.10.0.0/16
        region: "us-east-2"
        tags:
          Module: 5
        state: present
      register: vpc
    - name: Create public subnet  
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-public-sn
          Module: 5
        cidr: 10.10.0.0/24
        az: "us-east-2a"
        state: present
      register: public_subnet
    - name: Create private subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-private-sn-1
          Module: 5
        cidr: 10.10.1.0/24
        az: "us-east-2a"
        state: present
      register: private_subnet_1
    - name: Create private subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-private-sn-2
          Module: 5
        cidr: 10.10.2.0/24
        az: "us-east-2b"
        state: present
      register: private_subnet_2
    - name: Create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-igw
        state: present
      register: igw
    - name: Create NAT gateway and allocate new EIP
      ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnet.subnet.id }}"
        state: present
        wait: yes
        if_exist_do_not_create: true
      register: new_nat_gateway
    - name: Create public igw route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-public-rt
        subnets:
          - "{{ public_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_route_table
    - name: Create private NAT route table
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          Name: Module5-private-rt
        subnets:
          - "{{ private_subnet_1.subnet.id }}"
          - "{{ private_subnet_2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ new_nat_gateway.nat_gateway_id }}"
      register: nat_route_table
    - name: Create ig-dev security group
      ec2_group:
        name: Module5-ig-dev-sg
        description: Developer security group for ig
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports: 
              - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: Allow all to port 22
          - proto: tcp
            ports:
              - 5000
            cidr_ip: 
              -  98.238.156.111/32
              -  24.196.25.139/32
              -  24.239.105.213/32
            rule_desc: Allow my IP, GTA IP, prof IP
        state: present
      register: dev_sg
    - name: Create ig-postgres-tag security group
      ec2_group:
        name: Module5-ig-postgres-tag
        description: Security group for M5 ig-postgres-tag
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: ig_postgres_tag_sg
    - name: Create default security group
      ec2_group:
        name: Module5-default-sg
        description: Default security group for M5
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: all
            from_port: 0
            to_port: 65535
            cidr_ip:
              -  0.0.0.0/0
            rule_desc: Allow all
        state: present
      register: default_sg
    - name: Create ig-postgres security group
      ec2_group:
        name: Module5-ig-postgres
        description: Security group for M5 ig-postgres
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports: 
              - 5432
            group_id:
              -  "{{ ig_postgres_tag_sg.group_id }}"
            rule_desc: PostgreSQL
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              -  10.0.0.0/16
            rule_desc: Allow HTTPS
        state: present
      register: ig_postgres_sg
    - name: Edit ig-postres-tag security group
      ec2_group:
        name: Module5-ig-postgres-tag
        description: Security group for M5 ig-postgres-tag
        rules:
          - proto: tcp
            ports: 
              - 5000
            cidr_ip:
              -  98.238.156.111/32
            rule_desc: Allow my home IP to connect to Flask web app
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              -  10.0.0.0/16
            rule_desc: Allow HTTPS
        rules_egress:
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              - 10.0.0.0/16
          - proto: tcp
            ports:
              - 5432
            group_id:
              - "{{ ig_postgres_sg.group_id }}"
    - name: Create nginx servers security group
      ec2_group:
        name: Module5-nginx-servers
        description: Security group for M5 nginx servers
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            ports: 
              - 80
            cidr_ip:
              - 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 
              -  0.0.0.0/0
          - proto: tcp
            ports:
              - 22
            cidr_ip: 
              -  0.0.0.0/0
        state: present
      register: nginx_servers_sg
    - name: Create public network ACL
      ec2_vpc_nacl:
        name: Module5-ig-public-acl
        vpc_id: "{{ vpc.vpc.id }}"
        subnets: "{{ public_subnet.subnet.id }}"
        ingress:
          -  [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22]
          -  [105, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
          -  [110, 'tcp', 'allow', '24.196.25.139/32', null, null, 5000, 5000]
          -  [115, 'tcp', 'allow', '24.239.105.213/32', null, null, 22, 22]
          -  [120, 'tcp', 'allow', '98.238.156.111/32', null, null, 22, 22]
          -  [140, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
          -  [150, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
          -  [500, 'tcp', 'allow', '10.0.0.0/16', null, null, 0, 65535]
        egress:
          -  [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80]
          -  [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 443, 443]
          -  [120, 'tcp', 'allow', '0.0.0.0/0', null, null, 1024, 65535]
          -  [500, 'tcp', 'allow', '10.0.0.0/16', null, null, 0, 65535]
        state: present
    - name: Create private network ACL
      ec2_vpc_nacl:
        name: Module5-ig-private-acl
        vpc_id: "{{ vpc.vpc.id }}"
        subnets: "{{ private_subnet_1.subnet.id }}"
        ingress:
          -  [100, 'tcp', 'allow', '10.0.0.0/16', null, null, 5432, 5432]
          -  [500, 'tcp', 'allow', '10.0.0.0/16', null, null, 0, 65535]
        egress:
          -  [120, 'tcp', 'allow', '10.0.0.0/16', null, null, 32768, 65535]
          -  [500, 'tcp', 'allow', '10.0.0.0/16', null, null, 0, 65535]
        state: present
    - name: Create RDS subnet group
      rds_subnet_group:
        name: M5-ig-private-dbgrp
        description: M5 - DB Subnet Group for private image-gallery subnets
        subnets:
          - "{{ private_subnet_1.subnet.id }}"
          - "{{ private_subnet_2.subnet.id }}"
        state: present
      register: rds_sn_group
    - name: Create RDS
      rds:
        command: create
        instance_name: M5-image-gallery
        db_engine: postgres
        size: "20"
        instance_type: db.t2.micro
        vpc_security_groups: 
          - "{{ default_sg.group_id }}"
          - "{{ ig_postgres_tag_sg.group_id }}"
        subnet: "{{ rds_sn_group.subnet_group.name }}"
        username: postgres
        password: hellojustin123
        tags:
          Name: M5-ig-db
      register: rds





